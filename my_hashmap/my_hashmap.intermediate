# 1 "my_hashmap.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "my_hashmap.c"
# 1 "include/my_string.h" 1



# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4

# 209 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4
# 84 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 173 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void) ;
# 187 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 213 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 304 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));
# 326 "/usr/include/stdio.h" 3 4
extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
# 391 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 564 "/usr/include/stdio.h" 3 4
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 626 "/usr/include/stdio.h" 3 4
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 684 "/usr/include/stdio.h" 3 4
extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 757 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 775 "/usr/include/stdio.h" 3 4
extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 782 "/usr/include/stdio.h" 2 3 4
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 873 "/usr/include/stdio.h" 3 4

# 5 "include/my_string.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 321 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef int wchar_t;
# 32 "/usr/include/stdlib.h" 2 3 4


# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 199 "/usr/include/stdlib.h" 3 4
__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 453 "/usr/include/stdlib.h" 3 4
extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));
# 539 "/usr/include/stdlib.h" 3 4
extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));
# 565 "/usr/include/stdlib.h" 3 4
extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));
# 586 "/usr/include/stdlib.h" 3 4
extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 617 "/usr/include/stdlib.h" 3 4
extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 808 "/usr/include/stdlib.h" 3 4
typedef int (*__compar_fn_t) (const void *, const void *);
# 820 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 840 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 922 "/usr/include/stdlib.h" 3 4
extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1014 "/usr/include/stdlib.h" 2 3 4
# 1023 "/usr/include/stdlib.h" 3 4

# 6 "include/my_string.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdbool.h" 1 3 4
# 7 "include/my_string.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 61 "/usr/include/string.h" 3 4
extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 91 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 122 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 226 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 253 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 303 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 330 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 385 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 397 "/usr/include/string.h" 3 4
extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 499 "/usr/include/string.h" 3 4

# 8 "include/my_string.h" 2


# 9 "include/my_string.h"
size_t my_strlen(const char *s);







typedef struct string {
    size_t capacity;
    size_t size;
    char *buffer;
} string;

void string_free(string* s);

string new_string();


# 27 "include/my_string.h" 3 4
_Bool 
# 27 "include/my_string.h"
    string_increase_capacity(string* s, const size_t new_cap);


# 29 "include/my_string.h" 3 4
_Bool 
# 29 "include/my_string.h"
    string_init_with_capacity(string *s, const size_t start_cap);

# 30 "include/my_string.h" 3 4
_Bool 
# 30 "include/my_string.h"
    string_init(string* s);

# 31 "include/my_string.h" 3 4
_Bool 
# 31 "include/my_string.h"
    string_init_from_cstr(string* s, const char* cs);

# 32 "include/my_string.h" 3 4
_Bool 
# 32 "include/my_string.h"
    string_init_from_string(string* s, string* s2);


# 34 "include/my_string.h" 3 4
_Bool 
# 34 "include/my_string.h"
    string_clear(string* s);


# 36 "include/my_string.h" 3 4
_Bool 
# 36 "include/my_string.h"
    string_push_back_c(string* s, const char c);

# 37 "include/my_string.h" 3 4
_Bool 
# 37 "include/my_string.h"
    string_push_back_cstr(string* s, const char *s2);

# 38 "include/my_string.h" 3 4
_Bool 
# 38 "include/my_string.h"
    string_push_back_string(string* s, string* s2);


# 40 "include/my_string.h" 3 4
_Bool 
# 40 "include/my_string.h"
    string_replace_c(string* s, const char c, size_t idx);

# 41 "include/my_string.h" 3 4
_Bool 
# 41 "include/my_string.h"
    string_replace_cstr(string* s, const char* s2, const size_t start, const size_t count);

# 42 "include/my_string.h" 3 4
_Bool 
# 42 "include/my_string.h"
    string_replace_string(string* s, string* s2, const size_t start, const size_t count);


# 44 "include/my_string.h" 3 4
_Bool 
# 44 "include/my_string.h"
    string_replace_contents_cstr(string* s, const char* s2, const size_t count);

# 45 "include/my_string.h" 3 4
_Bool 
# 45 "include/my_string.h"
    string_replace_contents_string(string* s, string* s2, const size_t count);


# 47 "include/my_string.h" 3 4
_Bool 
# 47 "include/my_string.h"
    string_equals(string lhs, string rhs);
void string_copy(string *lhs, string rhs);
# 2 "my_hashmap.c" 2



# 1 "my_hashmap.h" 1


# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4

# 143 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
} max_align_t;
# 4 "my_hashmap.h" 2
# 26 "my_hashmap.h"

# 26 "my_hashmap.h"
struct string_int_hashmap_node {
    string key;
    int value;
    struct string_int_hashmap_node *next;
};
typedef struct string_int_hashmap_node string_int_hashmap_node;


struct string_int_hashmap {
    size_t size;
    size_t capacity;

    string_int_hashmap_node *buckets;
    
# 39 "my_hashmap.h" 3 4
   _Bool 
# 39 "my_hashmap.h"
        *allocated_buckets;

    void (*ptr_init_k)(string *_key);
    void (*ptr_init_v)(int *_value);
    void (*ptr_free_k)(string *_key);
    void (*ptr_free_v)(int *_value);
    void (*ptr_copy_k)(string *lhs, string rhs);
    void (*ptr_copy_v)(int *lhs, int rhs);
    unsigned long (*ptr_hash)(string key);
    
# 48 "my_hashmap.h" 3 4
   _Bool 
# 48 "my_hashmap.h"
        (*ptr_key_equals)(string lhs, string rhs);

    string *null_key;
};
typedef struct string_int_hashmap string_int_hashmap;


void string_int_hashmap_node_init (string_int_hashmap *map, string_int_hashmap_node *node, string _key, int _value);


string_int_hashmap_node *string_int_hashmap_node_new ();



# 61 "my_hashmap.h" 3 4
_Bool 
# 61 "my_hashmap.h"
    string_int_hashmap_init (
        string_int_hashmap *map,
        unsigned long (*hash)(string key),
        
# 64 "my_hashmap.h" 3 4
       _Bool 
# 64 "my_hashmap.h"
            (*key_equals)(string lhs, string rhs));


void string_int_hashmap_free (string_int_hashmap *map);


void string_int_hashmap_node_free (
        string_int_hashmap *map,
        string_int_hashmap_node *node);


void string_int_hashmap_node_copy (
        string_int_hashmap *map,
        string_int_hashmap_node *lhs,
        string_int_hashmap_node *rhs);


void string_int_hashmap_node_set_key (
        string_int_hashmap *map,
        string_int_hashmap_node *node,
        string _key);


void string_int_hashmap_node_set_value (
        string_int_hashmap *map,
        string_int_hashmap_node *node,
        int _value);


void string_int_hashmap_set_free_key_func (string_int_hashmap *map, void (*free_key)(string *_key));


void string_int_hashmap_set_free_value_func (string_int_hashmap *map, void (*free_value)(int *_value));


void string_int_hashmap_set_copy_key_func (string_int_hashmap *map, void (*copy_key)(string *lhs, string rhs));


void string_int_hashmap_set_copy_value_func (string_int_hashmap *map, void (*copy_value)(int *lhs, int rhs));


void string_int_hashmap_set_null_key (string_int_hashmap *map, string *_null_key);



# 108 "my_hashmap.h" 3 4
_Bool 
# 108 "my_hashmap.h"
    string_int_hashmap_resize (string_int_hashmap *map, const size_t new_cap);



# 111 "my_hashmap.h" 3 4
_Bool 
# 111 "my_hashmap.h"
    string_int_hashmap_insert_or_assign (string_int_hashmap *map, string _key, int _value);



# 114 "my_hashmap.h" 3 4
_Bool 
# 114 "my_hashmap.h"
    string_int_hashmap_insert (string_int_hashmap *map, string _key, int _value);



# 117 "my_hashmap.h" 3 4
_Bool 
# 117 "my_hashmap.h"
    string_int_hashmap_at (string_int_hashmap *map, string _key, int *value_ret_value);



# 120 "my_hashmap.h" 3 4
_Bool 
# 120 "my_hashmap.h"
    string_int_hashmap_contains (string_int_hashmap *map, string _key);


size_t string_int_hashmap_count (string_int_hashmap *map, string _key);



# 126 "my_hashmap.h" 3 4
_Bool 
# 126 "my_hashmap.h"
    string_int_hashmap_remove (string_int_hashmap *map, string _key);


# 128 "my_hashmap.h" 3 4
_Bool 
# 128 "my_hashmap.h"
    string_int_hashmap_init (
        string_int_hashmap *map,
        unsigned long (*hash)(string key),
        
# 131 "my_hashmap.h" 3 4
       _Bool 
# 131 "my_hashmap.h"
            (*key_equals)(string lhs, string rhs)
) {
    map->size = 0;
    map->capacity = ((32));

    map->allocated_buckets = (
# 136 "my_hashmap.h" 3 4
                             _Bool 
# 136 "my_hashmap.h"
                                  *) malloc(map->capacity * sizeof(
# 136 "my_hashmap.h" 3 4
                                                                   _Bool
# 136 "my_hashmap.h"
                                                                       ));
    if (map->allocated_buckets == 
# 137 "my_hashmap.h" 3 4
                                 ((void *)0)
# 137 "my_hashmap.h"
                                     ) { return 
# 137 "my_hashmap.h" 3 4
                                                0
# 137 "my_hashmap.h"
                                                     ; }
    memset(map->allocated_buckets, 
# 138 "my_hashmap.h" 3 4
                                  0
# 138 "my_hashmap.h"
                                       , map->capacity * sizeof(
# 138 "my_hashmap.h" 3 4
                                                                _Bool
# 138 "my_hashmap.h"
                                                                    ));
    if (map->allocated_buckets == 
# 139 "my_hashmap.h" 3 4
                                 ((void *)0)
# 139 "my_hashmap.h"
                                     ) { return 
# 139 "my_hashmap.h" 3 4
                                                0
# 139 "my_hashmap.h"
                                                     ; }

    map->buckets = (string_int_hashmap_node *) malloc(map->capacity * sizeof(string_int_hashmap_node));
    if (map->buckets == 
# 142 "my_hashmap.h" 3 4
                       ((void *)0)
# 142 "my_hashmap.h"
                           ) { return 
# 142 "my_hashmap.h" 3 4
                                      0
# 142 "my_hashmap.h"
                                           ; }

    map->ptr_hash = hash;
    map->ptr_key_equals = key_equals;
    map->ptr_init_k = 
# 146 "my_hashmap.h" 3 4
                     ((void *)0)
# 146 "my_hashmap.h"
                         ;
    map->ptr_init_v = 
# 147 "my_hashmap.h" 3 4
                     ((void *)0)
# 147 "my_hashmap.h"
                         ;
    map->ptr_free_k = 
# 148 "my_hashmap.h" 3 4
                     ((void *)0)
# 148 "my_hashmap.h"
                         ;
    map->ptr_free_v = 
# 149 "my_hashmap.h" 3 4
                     ((void *)0)
# 149 "my_hashmap.h"
                         ;
    map->ptr_copy_k = 
# 150 "my_hashmap.h" 3 4
                     ((void *)0)
# 150 "my_hashmap.h"
                         ;
    map->ptr_copy_v = 
# 151 "my_hashmap.h" 3 4
                     ((void *)0)
# 151 "my_hashmap.h"
                         ;
    return 
# 152 "my_hashmap.h" 3 4
          1
# 152 "my_hashmap.h"
              ;
}

void string_int_hashmap_set_free_key_func (string_int_hashmap *map, void (*free_key)(string *_key)) {
    map->ptr_free_k = free_key;
}

void string_int_hashmap_set_free_value_func (string_int_hashmap *map, void (*free_value)(int *_value)) {
    map->ptr_free_v = free_value;
}

void string_int_hashmap_set_copy_key_func (string_int_hashmap *map, void (*copy_key)(string *lhs, string rhs)) {
    map->ptr_copy_k = copy_key;
}

void string_int_hashmap_set_copy_value_func (string_int_hashmap *map, void (*copy_value)(int *lhs, int rhs)) {
    map->ptr_copy_v = copy_value;
}

void string_int_hashmap_set_null_key (string_int_hashmap *map, string *_null_key) {
    map->null_key = _null_key;
}

void string_int_hashmap_node_init (
        string_int_hashmap *map,
        string_int_hashmap_node *node,
        string _key,
        int _value
) {
    (void) map;
    (void) _key;
    (void) _value;
    node->next = 
# 184 "my_hashmap.h" 3 4
                ((void *)0)
# 184 "my_hashmap.h"
                    ;
}

void string_int_hashmap_node_set_key (
        string_int_hashmap *map,
        string_int_hashmap_node *node,
        string _key
) {
    if (map->ptr_copy_k != 
# 192 "my_hashmap.h" 3 4
                          ((void *)0)
# 192 "my_hashmap.h"
                              ) { map->ptr_copy_k(&node->key, _key); }
    else { node->key = _key; }
}

void string_int_hashmap_node_set_value (
        string_int_hashmap *map,
        string_int_hashmap_node *node,
        int _value
) {
    if (map->ptr_copy_v != 
# 201 "my_hashmap.h" 3 4
                          ((void *)0)
# 201 "my_hashmap.h"
                              ) { map->ptr_copy_v(&node->value, _value); }
    else { node->value = _value; }
}

void string_int_hashmap_free (string_int_hashmap *map) {
    if (map->buckets != 
# 206 "my_hashmap.h" 3 4
                       ((void *)0)
# 206 "my_hashmap.h"
                           ) {
        for (size_t i = 0; i < map->capacity; ++i)
            if (map->allocated_buckets[i])
                string_int_hashmap_node_free(map, &map->buckets[i]);
        free(map->buckets);
    }
    if (map->allocated_buckets != 
# 212 "my_hashmap.h" 3 4
                                 ((void *)0)
# 212 "my_hashmap.h"
                                     ) {
        free(map->allocated_buckets);
    }
}

void string_int_hashmap_node_free (
        string_int_hashmap *map,
        string_int_hashmap_node *node
) {
    if (node->next != 
# 221 "my_hashmap.h" 3 4
                     ((void *)0)
# 221 "my_hashmap.h"
                         ) {
        string_int_hashmap_node_free(map, node->next);
    }
    if (map->ptr_free_k != 
# 224 "my_hashmap.h" 3 4
                          ((void *)0)
# 224 "my_hashmap.h"
                              ) {
        printf("Freeing %s: %d\n", node->key.buffer, node->value);
        map->ptr_free_k(&node->key);
    }
    if (map->ptr_free_v != 
# 228 "my_hashmap.h" 3 4
                          ((void *)0)
# 228 "my_hashmap.h"
                              )
        map->ptr_free_v(&node->value);
}

void string_int_hashmap_node_copy (
        string_int_hashmap *map,
        string_int_hashmap_node *lhs,
        string_int_hashmap_node *rhs
) {
    if (map->ptr_copy_k != 
# 237 "my_hashmap.h" 3 4
                          ((void *)0)
# 237 "my_hashmap.h"
                              )
        map->ptr_copy_k(&lhs->key, rhs->key);
    if (map->ptr_copy_v != 
# 239 "my_hashmap.h" 3 4
                          ((void *)0)
# 239 "my_hashmap.h"
                              )
        map->ptr_copy_v(&lhs->value, rhs->value);
    lhs->next = rhs->next;
}



# 245 "my_hashmap.h" 3 4
_Bool 
# 245 "my_hashmap.h"
    string_int_hashmap_resize (string_int_hashmap *map, const size_t new_cap) {
    if (map->buckets == 
# 246 "my_hashmap.h" 3 4
                       ((void *)0)
# 246 "my_hashmap.h"
                           ) { return 
# 246 "my_hashmap.h" 3 4
                                      0
# 246 "my_hashmap.h"
                                           ; }
    const size_t total_size = new_cap * sizeof(string_int_hashmap_node);
    map->buckets = (string_int_hashmap_node *) realloc(map->buckets, total_size);
    if (map->buckets == 
# 249 "my_hashmap.h" 3 4
                       ((void *)0)
# 249 "my_hashmap.h"
                           ) { return 
# 249 "my_hashmap.h" 3 4
                                      0
# 249 "my_hashmap.h"
                                           ; }
    map->capacity = new_cap;
    return 
# 251 "my_hashmap.h" 3 4
          1
# 251 "my_hashmap.h"
              ;
}


# 254 "my_hashmap.h" 3 4
_Bool 
# 254 "my_hashmap.h"
    string_int_hashmap_insert_or_assign (string_int_hashmap *map, string _key, int _value) {
    const unsigned long bucket = map->ptr_hash(_key) % map->capacity;
    if (!map->allocated_buckets[bucket]) {
        string_int_hashmap_node_init(map, &map->buckets[bucket], _key, _value);
        map->allocated_buckets[bucket] = 
# 258 "my_hashmap.h" 3 4
                                        1
# 258 "my_hashmap.h"
                                            ;
    } else {
        string_int_hashmap_node *bucketptr = &(map->buckets[bucket]);
        do {
            if (map->ptr_key_equals(_key, bucketptr->key)) {
                printf("keys are equal!\n");
                bucketptr->value = _value;
                return 
# 265 "my_hashmap.h" 3 4
                      1
# 265 "my_hashmap.h"
                          ;
            }
            bucketptr = bucketptr->next;
        } while (bucketptr->next != 
# 268 "my_hashmap.h" 3 4
                                   ((void *)0)
# 268 "my_hashmap.h"
                                       );
        bucketptr->next = (string_int_hashmap_node *) malloc(sizeof(string_int_hashmap_node));
        if (bucketptr->next == 
# 270 "my_hashmap.h" 3 4
                              ((void *)0)
# 270 "my_hashmap.h"
                                  ) { return 
# 270 "my_hashmap.h" 3 4
                                             0
# 270 "my_hashmap.h"
                                                  ; }
        string_int_hashmap_node_init(map, bucketptr->next, _key, _value);
    }
    map->size++;
    return 
# 274 "my_hashmap.h" 3 4
          1
# 274 "my_hashmap.h"
              ;
}


# 277 "my_hashmap.h" 3 4
_Bool 
# 277 "my_hashmap.h"
    string_int_hashmap_insert (string_int_hashmap *map, string _key, int _value) {
    const unsigned long bucket = map->ptr_hash(_key) % map->capacity;
    if (!map->allocated_buckets[bucket]) {
        string_int_hashmap_node_init(map, &map->buckets[bucket], _key, _value);
        map->allocated_buckets[bucket] = 
# 281 "my_hashmap.h" 3 4
                                        1
# 281 "my_hashmap.h"
                                            ;
    } else {
        string_int_hashmap_node *bucketptr = &(map->buckets[bucket]);
        while (bucketptr->next != 
# 284 "my_hashmap.h" 3 4
                                 ((void *)0)
# 284 "my_hashmap.h"
                                     ) {
            bucketptr = bucketptr->next;
        }
        bucketptr->next = (string_int_hashmap_node *) malloc(sizeof(string_int_hashmap_node));
        if (bucketptr->next == 
# 288 "my_hashmap.h" 3 4
                              ((void *)0)
# 288 "my_hashmap.h"
                                  ) { return 
# 288 "my_hashmap.h" 3 4
                                             0
# 288 "my_hashmap.h"
                                                  ; }
        string_int_hashmap_node_init(map, bucketptr->next, _key, _value);
    }
    map->size++;
    return 
# 292 "my_hashmap.h" 3 4
          1
# 292 "my_hashmap.h"
              ;
}


# 295 "my_hashmap.h" 3 4
_Bool 
# 295 "my_hashmap.h"
    string_int_hashmap_contains (string_int_hashmap *map, string _key) {
    if (map->size == 0) { return 
# 296 "my_hashmap.h" 3 4
                                0
# 296 "my_hashmap.h"
                                     ; }

    const unsigned long bucket = map->ptr_hash(_key) % map->capacity;
    if (!map->allocated_buckets[bucket]) { return 
# 299 "my_hashmap.h" 3 4
                                                 0
# 299 "my_hashmap.h"
                                                      ; }

    string_int_hashmap_node *bucketptr = &(map->buckets[bucket]);
    do {
        if (map->ptr_key_equals(_key, bucketptr->key))
            return 
# 304 "my_hashmap.h" 3 4
                  1
# 304 "my_hashmap.h"
                      ;
    } while ((bucketptr = bucketptr->next) != 
# 305 "my_hashmap.h" 3 4
                                             ((void *)0)
# 305 "my_hashmap.h"
                                                 );
    return 
# 306 "my_hashmap.h" 3 4
          0
# 306 "my_hashmap.h"
               ;
}

size_t string_int_hashmap_count (string_int_hashmap *map, string _key) {
    if (map->size == 0) { return 0; }

    const unsigned long bucket = map->ptr_hash(_key) % map->capacity;
    if (!map->allocated_buckets[bucket]) { return 0; }

    size_t total = 0;
    string_int_hashmap_node *bucketptr = &(map->buckets[bucket]);
    do {
        if (map->ptr_key_equals(_key, bucketptr->key))
            ++total;
    } while ((bucketptr = bucketptr->next) != 
# 320 "my_hashmap.h" 3 4
                                             ((void *)0)
# 320 "my_hashmap.h"
                                                 );
    return total;
}


# 324 "my_hashmap.h" 3 4
_Bool 
# 324 "my_hashmap.h"
    string_int_hashmap_at (string_int_hashmap *map, string _key, int *value_ret_value) {
    if (map->size == 0) { return 
# 325 "my_hashmap.h" 3 4
                                0
# 325 "my_hashmap.h"
                                     ; }

    const unsigned long bucket = map->ptr_hash(_key) % map->capacity;
    if (!map->allocated_buckets[bucket]) { return 
# 328 "my_hashmap.h" 3 4
                                                 0
# 328 "my_hashmap.h"
                                                      ; }

    string_int_hashmap_node *bucketptr = &(map->buckets[bucket]);
    do {
        if (map->ptr_key_equals(_key, bucketptr->key)) {
            *value_ret_value = bucketptr->value;
            return 
# 334 "my_hashmap.h" 3 4
                  1
# 334 "my_hashmap.h"
                      ;
        }
        bucketptr = bucketptr->next;
    } while ((bucketptr = bucketptr->next) != 
# 337 "my_hashmap.h" 3 4
                                             ((void *)0)
# 337 "my_hashmap.h"
                                                 );
    return 
# 338 "my_hashmap.h" 3 4
          0
# 338 "my_hashmap.h"
               ;
}


# 341 "my_hashmap.h" 3 4
_Bool 
# 341 "my_hashmap.h"
    string_int_hashmap_remove (string_int_hashmap *map, string _key) {
    if (map->size == 0) { return 
# 342 "my_hashmap.h" 3 4
                                0
# 342 "my_hashmap.h"
                                     ; }

    const unsigned long bucket = map->ptr_hash(_key) % map->capacity;
    if (!map->allocated_buckets[bucket]) { return 
# 345 "my_hashmap.h" 3 4
                                                 0
# 345 "my_hashmap.h"
                                                      ; }

    string_int_hashmap_node *bucketptr = &(map->buckets[bucket]);

    if (map->ptr_key_equals(_key, bucketptr->key)) {
        printf("removing first element.\n");
        memcpy(&map->buckets[bucket], map->buckets[bucket].next, sizeof(string_int_hashmap_node));

        map->size--;
        return 
# 354 "my_hashmap.h" 3 4
              1
# 354 "my_hashmap.h"
                  ;
    }

    while (bucketptr->next != 
# 357 "my_hashmap.h" 3 4
                             ((void *)0)
# 357 "my_hashmap.h"
                                 ) {
        if (map->ptr_key_equals(_key, bucketptr->next->key)) {
            string_int_hashmap_node *temp = bucketptr->next->next;
            string_int_hashmap_node_free(map, bucketptr->next);
            bucketptr->next = temp;
            return 
# 362 "my_hashmap.h" 3 4
                  1
# 362 "my_hashmap.h"
                      ;
        }
        bucketptr = bucketptr->next;
    }
    return 
# 366 "my_hashmap.h" 3 4
          0
# 366 "my_hashmap.h"
               ;
}
# 6 "my_hashmap.c" 2




unsigned long djb2(char *str) {
    unsigned long hash = 5381;
    int c;
    while ((c = *str++))
        hash = ((hash << 5) + hash) + c;
    return hash;
}

unsigned long hash_string(string s) {
    return djb2(s.buffer);
}
# 71 "my_hashmap.c"
int main(void) {

    string s; string_init_from_cstr(&s, "Hello, World!"); string s2; string_init_from_cstr(&s2, "Another example string."); string s3; string_init_from_cstr(&s3, "Not in the map.");; string_int_hashmap map; string_int_hashmap_init(&map, hash_string, string_equals); string_int_hashmap_set_free_key_func(&map, string_free); string_int_hashmap_set_copy_key_func(&map, string_copy);; int value;;;

    string_int_hashmap_insert(&map, s, 22); string_int_hashmap_insert(&map, s2, 64); string_int_hashmap_insert(&map, s, 28); if (!string_int_hashmap_at(&map, s, &value)) { exit(1); } printf("Retrieved value: %d\n", value); if (!string_int_hashmap_at(&map, s2, &value)) { exit(1); } printf("Retrieved value: %d\n", value); if (!string_int_hashmap_resize(&map, ((32)) * 2)) { printf("Couldn't resize.\n"); } else { if (!string_int_hashmap_at(&map, s, &value)) { printf("Couldn't grab value: %s\n", s.buffer); } else { printf("Retrieved value: %d\n", value); } } printf("contains s: %s\n", string_int_hashmap_contains(&map, s) ? "true" : "false"); printf("contains s3: %s\n", string_int_hashmap_contains(&map, s3) ? "true" : "false"); printf("count s: %zu\n", string_int_hashmap_count(&map, s));;

    if (!string_int_hashmap_remove(&map, s)) {
        printf("Didn't remove element.\n");
    } else { printf("Removed element.\n"); }

    string_int_hashmap_insert(&map, s, 22); string_int_hashmap_insert(&map, s2, 64); string_int_hashmap_insert(&map, s, 28); if (!string_int_hashmap_at(&map, s, &value)) { exit(1); } printf("Retrieved value: %d\n", value); if (!string_int_hashmap_at(&map, s2, &value)) { exit(1); } printf("Retrieved value: %d\n", value); if (!string_int_hashmap_resize(&map, ((32)) * 2)) { printf("Couldn't resize.\n"); } else { if (!string_int_hashmap_at(&map, s, &value)) { printf("Couldn't grab value: %s\n", s.buffer); } else { printf("Retrieved value: %d\n", value); } } printf("contains s: %s\n", string_int_hashmap_contains(&map, s) ? "true" : "false"); printf("contains s3: %s\n", string_int_hashmap_contains(&map, s3) ? "true" : "false"); printf("count s: %zu\n", string_int_hashmap_count(&map, s));;

    string_int_hashmap_free(&map);
}
